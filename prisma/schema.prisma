// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  password         String
  username         String?
  fullname         String?
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  description      String?
  profileImage     String?
  isProfileInfoset Boolean   @default(false)
  emailVerified    Boolean   @default(true)
  Gigs             Gigs[]
  Reviews          Reviews[]
  myOrders         Orders[]  @relation("buyer")
  orders           Orders[]  @relation("seller")

  sentMessages        Message[]        @relation("sentMessages")
  receivedMessages    Message[]        @relation("receivedMessages")
  Job                 Job[]
  JobApplications     JobApplication[]
  Post                Post[]
  PostResponse        PostResponse[]
  Notifications       Notifications[]
  Contarctasfrelencer Contarct[]       @relation("frellencer")

  Contarctasclient Contarct[] @relation("client")
}

model Gigs {
  id           String    @id @default(cuid())
  title        String
  description  String
  category     String
  deliveryTime Int
  revisions    Int
  features     String[]
  price        Int
  shortDesc    String
  createdAt    DateTime  @default(now())
  images       String[]
  userId       String
  createdBy    User      @relation(fields: [userId], references: [id])
  Reviews      Reviews[]
  Orders       Orders[]
}

model Orders {
  id String @id @default(cuid())

  createdAt   DateTime  @default(now())
  buyer       User      @relation("buyer", fields: [buyerId], references: [id])
  buyerId     String
  seller      User      @relation("seller", fields: [sellerId], references: [id])
  sellerId    String
  // paymentIntent String    @unique
  isCompleted Boolean   @default(false)
  gig         Gigs      @relation(fields: [gigId], references: [id])
  gigId       String
  price       Int
  messages    Message[]
}

model Reviews {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  rating     Int
  reviewText String?
  gigId      String
  gig        Gigs     @relation(fields: [gigId], references: [id])

  reviewer   User   @relation(fields: [reviewerId], references: [id])
  reviewerId String
}

model Message {
  id               String          @id @default(cuid())
  text             String
  createdAt        DateTime        @default(now())
  isRead           Boolean         @default(false)
  sender           User            @relation("sentMessages", fields: [senderId], references: [id])
  senderId         String
  recipient        User            @relation("receivedMessages", fields: [recipientId], references: [id])
  recipientId      String
  order            Orders?         @relation(fields: [orderId], references: [id])
  orderId          String?
  jobapplication   JobApplication? @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId String?
}

model Job {
  id           String           @id @default(cuid())
  title        String
  description  String
  category     String
  price        Int
  shortDesc    String?
  createdAt    DateTime         @default(now())
  userId       String
  createdBy    User             @relation(fields: [userId], references: [id])
  isCompleted  Boolean          @default(false)
  expertise    String[]
  applications JobApplication[]
}

model JobApplication {
  id     String @id @default(cuid())
  jobId  String
  job    Job    @relation(fields: [jobId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt  DateTime   @default(now())
  isAccepted Boolean    @default(false)
  status     String?    @default("pending")
  messages   Message[]
  Contarct   Contarct[]
}

model Community {
  id    String @id @default(uuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Post {
  id String @id @default(uuid())

  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  communityId  String
  community    Community      @relation(fields: [communityId], references: [id])
  PostResponse PostResponse[]
}

model PostResponse {
  id String @id @default(uuid())

  content String?
  userId  String?
  user    User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId String?
  post   Post?   @relation(fields: [postId], references: [id])
}

model Notifications {
  id String @id @default(uuid())

  userID  String
  user    User   @relation(fields: [userID], references: [id])
  message String

  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
}

model Contarct {
  id               String         @id @default(uuid())
  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id])
  freelancerId     String
  freelancer       User           @relation("frellencer", fields: [freelancerId], references: [id])
  clientId         String
  client           User           @relation("client", fields: [clientId], references: [id])
  title            String
  description      String
  price            Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
